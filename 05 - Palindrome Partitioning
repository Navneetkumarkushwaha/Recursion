class Solution:
    def palindrome(self,s):
        return s == s[::-1]
    
    def solve(self,cur_string,ds):
        if not cur_string:
            self.ans.append(ds[:])
            return
        for ind in range(1,len(cur_string)+1):
            if self.palindrome(cur_string[:ind]):
                ds.append(cur_string[:ind])
                self.solve(cur_string[ind:],ds)
                ds.pop()
    def partition(self, s: str) -> List[List[str]]:
        self.ans = []
        self.solve(s,[])
        return self.ans
        
        
Time Complexity: O( (2^n) *k*(n/2) )

Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another 
data structure, where k  is the average length of the palindrome list.

Space Complexity: O(k * x)

Reason: The space complexity can vary depending upon the length of the answer. k is the average length of the list of palindromes and if we have x such
list of palindromes in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).
